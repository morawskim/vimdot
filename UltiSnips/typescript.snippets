snippet ng-validator "angular custom validator class" b
import { AbstractControl, ValidatorFn } from '@angular/forms'

export class AppValidators {
  static ${1:startsWith}(${2:letter} : string) : ValidatorFn {
    return (control: AbstractControl) : {[key: string]: any} => {
      if (control.value && !control.value.startsWith(letter)) {
        return {
          $1: $2
        }
      }

     return null;
    }
  }
}
${0}
endsnippet

snippet decorator-method "typescript method decorator" b
export function ${1}(parameter:any) {
    return function(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {
        var originalMethod = descriptor.value;
        descriptor.value = function() {
            var context = this
            var args = arguments;
            ${0}
            return originalMethod.apply(context, args);
        };
        return descriptor;
    }
};
endsnippet

snippet typeGuard "Typescript type guard" b
function is${1}(x: any): x is $1 {
    return (x as $1).${2:someProperty} !== undefined;
}
$0
endsnippet

snippet notNullableType "Typescript not nullable type" b
type NonNullable<T> = T extends null | udefined ? never : T;
endsnippet

snippet declareFunc "Type definition for global JavaScript function"
declare function greet(greeting: string): void;
endsnippet

snippet declareGlobalVar "Type definition for global JavaScript variable"
declare const ${1:Foo}: ${2:OurGlobalObject};
endsnippet

snippet declareModule "Type definition for node module"
// we can import it:
// import * as URL from "path";
declare module "path" {
    export function normalize(p: string): string;
    export function join(...paths: any[]): string;
    export var sep: string;
}
endsnippet

snippet discriminatedUnion "Typescript discriminated unions" b
interface UploadEvent { type: 'upload'; filename: string; contents: string }
interface DownloadEvent { type: 'download'; filename: string; }
type AppEvent = UploadEvent | DownloadEvent;

function handleEvent(e: AppEvent) {
    switch (e.type) {
        case 'download':
            e // Typem jest DownloadEvent
            break;
        case 'upload':
            e; // Typem jest UploadEvent
            break;
        default:
            const invalidEvent: never = e;
            throw new Error(`Unknown event: ${invalidEvent}`);
    }
}
$0
endsnippet
