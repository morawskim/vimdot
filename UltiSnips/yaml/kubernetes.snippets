snippet k8sConfigMap "Kubernetes ConfigMap" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  settings.ini: |
    [section]
    foo=bar
  key1: value
$0
endsnippet

snippet k8sPodSpec "Kubernetes PodSpec" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:app}
spec:
  containers:
    - name: $1
      image: ${2:nginx}
      env:
        - name: FOO
          value: BAR
        - name: APP_KEY
          valueFrom:
            configMapKeyRef:
              name: ${3:app-config}
              key: key1
      volumeMounts:
        - mountPath: /config
          name: ${4:config}
          readOnly: true
  volumes:
    - name: $4
      configMap:
        name: $3
        items:
          - key: settings.ini
            path: filenameInFileSystem.ini
$0
endsnippet

snippet k8sPodSecretVolumen "Kubernetes secret volumen to mount in volumeMounts PodSpec" b
# add to PodSpec
volumes:
    - name: secrets
      secret:
        secretName: ${1:TODO-CHANGE-TO-SECRET-NAME}
        defaultMode: 0400
        items:
          - key: ${2:config}
            path: ${3:filenameInFS}
$0
endsnippet

snippet k8sPodHostVolumen "Kubernetes host path volumen to mount in volumeMounts PodSpec" b
# add to PodSpec
volumes:
  - name: ${1:example}
    hostPath:
      path: ${2:/path/from/host/to/mount}
$0
endsnippet

snippet k8sDeployment "Kubernetes Deployment" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:app}
  labels:
    ${2:app: backend}
spec:
  replicas: 1
  selector:
    matchLabels:
      $2
  template:
    metadata:
      labels:
        $2
    spec:
      # PodSpec ...
$0
endsnippet

snippet k8sServiceClusterIP "Kubernetes Service ClusterIP" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:backend}
spec:
  selector:
    ${2:app: backend}
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80
      protocol: TCP
$0
endsnippet

snippet k8sDynamicPvc "Kubernetes Dynamic Volume Provisioning" b
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${1:data}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ${2:standard}
  resources:
    requests:
      storage: ${3:1Gi}
# In pod spec use code bellow. You also have to mount this volume in containers.[*].volumeMounts
#volumes:
#  - name: cache
#    persistentVolumeClaim:
#      claimName: $1
$0
endsnippet

snippet k8sAWSServiceAccount "Kubernetes ServiceAccount with AWS role" b
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${1:notify}
  annotations:
    eks.amazonaws.com/role-arn: ${2:arn:aws:iam::1234567890:role/test}
# in Pod spec create key `serviceAccountName` with value $1
# in the container use "aws sts get-caller-identity" to confirm role
$0
endsnippet

snippet k8sAWSIngress "Kubernetes AWS Ingress" b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${1:app-ingress}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
spec:
  rules:
    - host: ${2:example.com}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${3:podinfo}
                port:
                  number: ${4:9898}
$0
endsnippet

snippet k8sResourceLimits "Kubernetes resource limits for container" b
resources:
  requests:
    memory: "64Mi"
    cpu: "250m"
  limits:
    memory: "128Mi"
    cpu: "500m"
$0
endsnippet

snippet k8sResourceQuota "Kubernetes resource limits for namespace" b
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ${1:quota}
  namespace: ${2:mynamespace}
spec:
  hard:
    limits.cpu: "2"
    limits.memory: "2Gi"
$0
endsnippet

snippet k8sHTTPLivenessProbe "Kubernetes liveness HTTP probe for container" b
livenessProbe:
  httpGet:
    path: /healthz
    port: 80
  periodSeconds: 10
  initialDelaySeconds: 10
  failureThreshold: 2
  timeoutSeconds: 3
$0
endsnippet

snippet k8sHpa "Kubernetes HorizontalPodAutoscaler controller" b
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${1:app}
spec:
  minReplicas: 1
  maxReplicas: 4
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${1:backend}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
$0
endsnippet
