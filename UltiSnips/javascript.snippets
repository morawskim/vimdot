snippet checkNetworkConnection "check network connection" b
function checkInternet() {
    return !!navigator.onLine;
}
endsnippet

snippet async_error_handling_fn "error handling with async and await (returns go like responses)" b
/**
 * @description ### Returns Go / Lua like responses(data, err)
 * when used with await
 *
 * @link https://dev.to/sobiodarlington/better-error-handling-with-async-await-2e5m
 * @link https://www.npmjs.com/package/await-to-js
 *
 * @example
 * async function userProfile() {
 *   let [user, userErr] = await handle(getUser());
 *
 *   if(userErr) throw new Error('Could not fetch user details');
 *   //....
 * }
 */
const handle = (promise) => {
  return promise
    .then(data => ([data, undefined]))
    .catch(error => Promise.resolve([undefined, error]));
}
$0
endsnippet

snippet onerror "window.onerror" b
import ErrorStackParser from 'error-stack-parser';

window.addEventListener('error', function(e) {
    const { message, filename, lineno, colno, error } = e;
    let stack = null;
    if (error && error instanceof Error) {
        stack = ErrorStackParser.parse(error) || [];
    }
    const userAgent = navigator.userAgent;
    const errorObj = { message, filename, lineno, colno, stack, userAgent };
    const blob = new Blob([JSON.stringify(errorObj)], {
        type: 'application/json',
    });
    navigator.sendBeacon('${1:/error/reporting}', blob);
});
$0
endsnippet

snippet browser_locale "Browser user locale and language" b
const locale = (navigator.languages && navigator.languages[0])
    || navigator.language
    || navigator.userLanguage
    || 'en-US';
const lang = locale.split('-')[0];
$0
endsnippet

snippet replacePlaceholders "Replace placeholders in string" b
/**
 *
 * @example
 * replacePlaceholders("Hello %NAME%", {"NAME": 'marcin'});
 * //Hello marcin
 *
 * @param {string} str
 * @param {object} replacements
 */
function replacePlaceholders(str, replacements) {
    if (typeof replacements !== 'object') {
        return str;
    }

    return str.replace(/%\w+%/, (phase) => {
        const key = phase.slice(1, -1);
        return replacements[key] || phase;
    });
}
$0
endsnippet

snippet viewport "browser viewport" b
const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
$0
endsnippet

snippet isInViewport "Is element in viewport" b
/*!
 * Determine if an element is in the viewport
 * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param  {Node}    elem The element
 * @return {Boolean}      Returns true if element is in the viewport
 *
 * @deprecated use IntersectionObserver API
 * @link https://gist.github.com/davidtheclark/5515733
 */
function isInViewport(elem) {
    const distance = elem.getBoundingClientRect();
    return (
        distance.top >= 0 &&
        distance.left >= 0 &&
        distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        distance.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
};
$0
endsnippet

snippet sumObjectsByKey "sum of two or more objects by key" b
/*
 * @example
 * const a = {"a": 12, "b": 3}
 * const b = {"a": 3, "b": 2,c: 7}
 * sumObjectsByKey(a,b)
 * // result { a: 15, b: 5, c: 7 }
 */
function sumObjectsByKey(...objects) {
    return objects.reduce((a, b) => {
        for (let k in b) {
            if (b.hasOwnProperty(k))
                a[k] = (a[k] || 0) + b[k];
        }
        return a;
    }, {});
}
$0
endsnippet

snippet getElementOffset "Get element offset using getBoundingClientRect" b
export function getElementOffset(el: HTMLElement) {
    const rect = el.getBoundingClientRect();

    return {
        top: rect.top + (window.pageYOffset || document.documentElement.scrollTop),
        left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft),
    };
}
endsnippet
