snippet checkNetworkConnection "check network connection" b
function checkInternet() {
    return !!navigator.onLine;
}
endsnippet

snippet async_error_handling_fn "error handling with async and await (returns go like responses)" b
/**
 * @description ### Returns Go / Lua like responses(data, err)
 * when used with await
 *
 * @link https://dev.to/sobiodarlington/better-error-handling-with-async-await-2e5m
 * @link https://www.npmjs.com/package/await-to-js
 *
 * @example
 * async function userProfile() {
 *   let [user, userErr] = await handle(getUser());
 *
 *   if(userErr) throw new Error('Could not fetch user details');
 *   //....
 * }
 */
const handle = (promise) => {
  return promise
    .then(data => ([data, undefined]))
    .catch(error => Promise.resolve([undefined, error]));
}
$0
endsnippet

snippet onerror "window.onerror" b
window.addEventListener('error', function(e) {
    // prevents the firing of the default event handler.
    e.preventDefault();

    const {message, filename, lineno, colno, error} = e;
    let stack = null;
    if (error && error instanceof Error) {
        stack = error.stack || null;
        // require error-stack-parser npm package
        //stack = ErrorStackParser.parse(error) || []
    }
    const userAgent = navigator.userAgent;
    console.error('ERROR:',  message, filename, lineno, colno, stack, userAgent);
});
$0
endsnippet

snippet browser_locale "Browser user locale and language" b
const locale = (navigator.languages && navigator.languages[0])
    || navigator.language
    || navigator.userLanguage
    || 'en-US';
const lang = locale.split('-')[0];
$0
endsnippet

