snippet proxy-ssl "Vhost proxy ssl" b
server {
    listen 443;
    server_name ${1:example.com};

    ssl_certificate           ${2:/etc/letsencrypt/live/$1}/$1.cert;
    ssl_certificate_key       $2/$1.key;

    ssl on;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    access_log            /var/log/nginx/$1.access.log;

    location / {

      proxy_set_header        Host $http_host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          http://${3:localhost:80};
      proxy_read_timeout  90;
      proxy_redirect      http://$3; https://$1;
    }
}
${0}
endsnippet

snippet proxy "Vhost proxy" b
server {
    server_name ${1:yoururlhere.com};

    location / {
        proxy_pass ${2:http://192.168.20.20};
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
    }
}
#ln -s /etc/nginx/sites-available/$1 /etc/nginx/sites-enabled/
#/usr/sbin/nginx -t
$0
endsnippet

snippet locations "A few standard location directives for vhost" b
# This location block will handle requests to the .well-known directory, where
# Certbot will place a temporary file to validate that the DNS for our domain
# resolves to our server. With this configuration in place, we will be able to
# use Certbot’s webroot plugin to obtain certificates for our domain.
location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
}

# Ensures that .htaccess files will never be served to users.
location ~ /\.ht {
    deny all;
}

# Ensure that requests to /favicon.ico and /robots.txt will not be logged
location = /favicon.ico {
    log_not_found off; access_log off;
}
location = /robots.txt {
    log_not_found off; access_log off; allow all;
}

# Turns off logging for static asset requests and ensures that these assets are highly cacheable
location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
    expires max;
    log_not_found off;
}
$0
endsnippet

snippet swScope "Allow to change scope of service worker by set response header" b
location ~* (${1:sw}\.js)$ {
  # tells browsers the service worker scope
  add_header 'Service-Worker-Allowed' '${2:/app}';
}
$0
endsnippet
