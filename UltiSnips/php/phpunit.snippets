snippet cmdIntegrationTest "Symfony integration command test" b
public function test${1:Execute}(): void
{
    $kernel = static::createKernel();
    $application = new Application($kernel);

    $command = $application->find('app:${2:create-user}');
    $commandTester = new CommandTester($command);
    $commandTester->execute([
        ${3:// pass arguments to the helper, prefix the key with two dashes when passing options}
    ]);

    // the output of the command in the console
    $output = $commandTester->getDisplay();
    ${4:$this->assertStringContainsString('Username: Wouter', $output);}
    $0
}
endsnippet

snippet cmdUnitTest "Symfony integration command test" b
public function test${1:Execute}(): void
{
    $this->expectException(\LogicException::class);
    $command = new SyncCommand();
    $commandTester = new CommandTester($command);
    $commandTester->execute([
        // pass arguments to the helper
        'since' => '2020-05-01',
        'to' => '2020-05-31',
    ]);
    $0
}
endsnippet

snippet guzzleMockTest "Guzzle mock handler unit test" b
public function test${1:GuzzleClient}(): void
{
    $container = [];
    $history = Middleware::history($container);
    $mock = new MockHandler([
        new Response(200, ['X-Foo' => 'Bar'], 'Hello, World'),
    ]);
    $handlerStack = HandlerStack::create($mock);
    $handlerStack->push($history);
    $client = new Client(['handler' => $handlerStack]);
    $0
}
endsnippet

snippet testExtRequired "PHPUnit annotation to skip tests when installed extensions, are not met" b
@requires extension ${1:intl}
$0
endsnippet

snippet sfWebClient "Symfony client for WebTest" b
$client = static::createClient();
$client->request(
    'POST',
    '/api/endpoint',
    [],
    [],
    ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => sprintf('Bearer %s', $tokenJWT)],
    json_encode($body)
);

$this->assertResponseIsSuccessful();
$0
endsnippet

snippet testTwigEnv "PHPUnit Twig env with array loader" b
$templates = ['email/test/test.html.twig' => 'Hello {{ name }}',];
$loader = new ArrayLoader($templates);

$twig = new Environment($loader, [
    'debug' => true,
    'cache' => false,
    'autoescape' => fn($name) => 'html',
]);
$0
endsnippet

snippet testMockCallback "PHPUnit mock - call a callback passed as argument" b
$entityManagerMock->method('transactional')
    ->willReturnCallback(fn (callable $callback) => $callback());
$0
endsnippet

snippet testNormalizer "PHPUnit - create ObjectNormalizer from Symfony/Serializer component" b
$normalizer = new ObjectNormalizer(
    new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader())),
    new MetadataAwareNameConverter(
        new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader())),
        new CamelCaseToSnakeCaseNameConverter()
    )
);
$normalizer->setSerializer(new Serializer([new JsonSerializableNormalizer(), $normalizer], []));
$0
endsnippet
