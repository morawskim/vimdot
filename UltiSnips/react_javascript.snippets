snippet rcc "React Component"
import React, { Component } from 'react'

export default class ${1:HelloComponent} extends Component {
  render() {
    return (${2:<div></div>});
  }
}
$0
endsnippet

snippet rrd "react-router-dom usage" b
//import { BrowserRouter as Router, Route, Switch, Link } from "react-router-dom";
<Router>
    <Route path={'/performance'}>
        ${1:<Performance />}
    </Route>
    <Route exact path={'/'}>
        ${2:<Home />}
    </Route>
</Router>
$0
endsnippet

snippet hoc "React typescript HoC"
import React from 'react';

const with${1:ActionColumns} = <P extends object>(Component: React.ComponentType<P>) => {
    return class With$1 extends React.Component<P> {
        render() {
            return <Component {...this.props as P} />;
        }
    }
};

export default with$1;
$0
endsnippet

# https://medium.com/@thehappybug/using-react-context-in-a-typescript-app-c4ef7504c858
snippet hocTs "React HOC with properly type-checked in TypeScript" b
type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export function with${1:AppContext}<
  P extends { ${2:appContext}?: AppContextInterface },
  R = Omit<P, '$2'>
  >(
  Component: React.ComponentClass<P> | React.StatelessComponent<P>
  ): React.SFC<R> {
  return function BoundComponent(props: R) {
    return (
      <$1Consumer>
        {value => <Component {...props} $2={value} />}
      </$1Consumer>
    );
  };
}
endsnippet

snippet reactVirtualized "React virtualized list" b
import React from 'react'
import { List, AutoSizer, CellMeasurer, CellMeasurerCache } from "react-virtualized";

const VirtualList: React.FC<${1:void}> = (props) => {
    const renderRow = ({index, key, style}) => {
        //todo implement
        return (<span>TODO</span>);
    };

    <List
        width={rowWidth}
        height={listHeight}
        deferredMeasurementCache={cache}
        rowHeight={cache.rowHeight}
        rowRenderer={renderRow}
        rowCount={props.list.length}
        overscanRowCount={3}
    />
};
$0
endsnippet


snippet AutoSizer "react virtualized usage of AutoSizer component" b
// import { AutoSizer } from "react-virtualized";
<AutoSizer>
    {
        ({width, height}) => {
            return (
                $0
            );
        }
    }
</AutoSizer>
endsnippet

snippet usePrevious "React hook usePrevious" b
function usePrevious<T>(value: T): T {
    const ref = useRef<T>();
    useEffect(() => {
        ref.current = value;
    });
    return ref.current;
}
endsnippet

snippet createMuiTheme "React & custom material design theme - createMuiTheme" b
import {createMuiTheme} from '@material-ui/core/styles';

const theme = createMuiTheme({
    typography: {},
    palette: {
        primary: {
            light: '#3f51b5',
            main: '#3f51b5',
            dark: '#142688',
            contrastText: '#ffffff',
        },
        secondary: {
            light: '#5bedcb',
            main: '#00ba9a',
            dark: '#00896c',
            contrastText: '#ffffff',
        },
    },
});

/**
 Usage:
 @example
 import {ThemeProvider} from '@material-ui/core/styles';
 <ThemeProvider theme={theme}>
 {children}
 </ThemeProvider>
 */
export default theme;
$0
endsnippet

snippet makeStyles "React & material design - makeStyles" b
import {createStyles, makeStyles, Theme} from '@material-ui/core/styles';
const useStyles = makeStyles((theme: Theme) => createStyles({
    root: {
        color: theme.palette.primary.main,
        padding: theme.spacing(1,2),
        fontSize: theme.typography.pxToRem(14),
        '&$active:hover': {},
    },
    active: {},
}));
// To function component add: "const classes = useStyles(props);"
$0
endsnippet

snippet toast "React show toastify message" b
import {toast} from "react-toastify";
toast('${1:Error}', {type: 'error'});
$0
endsnippet
