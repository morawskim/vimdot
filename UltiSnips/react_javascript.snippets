snippet imrc "Import React and Component" b
import React, { Component } from 'react'
$0
endsnippet

snippet rfc "React functional component"
import React from 'react';

export default function ${1:Component}(props) {
    return (
        ${2:<h1>$1</h1>}
    );
}
$0
endsnippet

snippet rfcts "React function component with TS" b
import React from "react";

interface ${1:ExampleComponent}Props {
    ${2}
}

const $1Component: React.FunctionComponent<$1Props> = props => {
    return (${3:<span></span>});
};

$1Component.defaultProps = {
};

export default $1Component;
$0
endsnippet

snippet rcc "React Component"
import React, { Component } from 'react'

export default class ${1:HelloComponent} extends Component {
  render() {
    return (${2:<div></div>});
  }
}
$0
endsnippet

snippet rrdi "React router dom imports"
import { BrowserRouter as Router, Route, Link } from "react-router-dom";
$0
endsnippet

snippet reb "React error boundary"
import React, {Component} from 'react';
import ErrorStackParser from 'error-stack-parser';

// @link https://pl.reactjs.org/docs/error-boundaries.html

export default class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
      console.error({error, errorInfo});
      console.error(ErrorStackParser.parse(error));
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}
$0
endsnippet

snippet hoc "React typescript HoC"
import React from 'react';

const with${1:ActionColumns} = <P extends object>(Component: React.ComponentType<P>) => {
    return class With$1 extends React.Component<P> {
        render() {
            return <Component {...this.props as P} />;
        }
    }
};

export default with$1;
$0
endsnippet

snippet usePrevious "React hook usePrevious" b
function usePrevious<T>(value: T): T {
    const ref = useRef<T>();
    useEffect(() => {
        ref.current = value;
    });
    return ref.current;
}
endsnippet

snippet createMuiTheme "React & custom material design theme - createMuiTheme" b
import {createMuiTheme} from '@material-ui/core/styles';

const theme = createMuiTheme({
    typography: {},
    palette: {
        primary: {
            light: '#3f51b5',
            main: '#3f51b5',
            dark: '#142688',
            contrastText: '#ffffff',
        },
        secondary: {
            light: '#5bedcb',
            main: '#00ba9a',
            dark: '#00896c',
            contrastText: '#ffffff',
        },
    },
});

/**
 Usage:
 @example
 import {ThemeProvider} from '@material-ui/core/styles';
 <ThemeProvider theme={theme}>
 {children}
 </ThemeProvider>
 */
export default theme;
$0
endsnippet

snippet makeStyles "React & material design - makeStyles" b
import {createStyles, makeStyles, Theme} from '@material-ui/core/styles';
const useStyles = makeStyles((theme: Theme) => createStyles({
    root: {
        color: theme.palette.primary.main,
        padding: theme.spacing(1,2),
        '&$active:hover': {},
    },
    active: {},
}));
// To function component add: "const classes = useStyles(props);"
$0
endsnippet
