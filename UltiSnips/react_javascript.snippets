snippet imrc "Import React and Component" b
import React, { Component } from 'react'
$0
endsnippet

snippet rfc "React functional component"
import React from 'react';

export default function ${1:Component}(props) {
    return (
        ${2:<h1>$1</h1>}
    );
}
$0
endsnippet

snippet rfcts "React function component with TS" b
import React from "react";

interface ${1:ExampleComponent}Props {
    ${2}
}

const $1Component: React.FunctionComponent<$1Props> = props => {
    return (${3:<span></span>});
};

$1Component.defaultProps = {
};

export default $1Component;
$0
endsnippet

snippet rcc "React Component"
import React, { Component } from 'react'

export default class ${1:HelloComponent} extends Component {
  render() {
    return (${2:<div></div>});
  }
}
$0
endsnippet

snippet rrdi "React router dom imports"
import { BrowserRouter as Router, Route, Link } from "react-router-dom";
$0
endsnippet

snippet reb "React error boundary"
import React, {Component} from 'react';
import ErrorStackParser from 'error-stack-parser';

// @link https://pl.reactjs.org/docs/error-boundaries.html

export default class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
      console.error({error, errorInfo});
      console.error(ErrorStackParser.parse(error));
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}
$0
endsnippet

