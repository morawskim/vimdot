snippet jvalidator_rule "jQuery validator add new rule to element" b
$('${1}').rules(
    'add',
    {
        ${0}validateRegistryNumber: [],
        messages: {
            validateRegistryNumber: _('Niepoprawny numer rejestru')
        }
    }
);
endsnippet

snippet jvalidator_method "jQuery validator add new validator method" b
$.validator.addMethod(
    '${1}',
    function (v, element) {
        ${0}let is9Length = $.validator.methods.rangelength(v, element, [9,9]);
        let is16Length = $.validator.methods.rangelength(v, element, [16,16]);
        let isDigitsOnly = $.validator.methods.digits(v, element);

        return (is9Length || is16Length) && isDigitsOnly;
    }
);
endsnippet

snippet digitsOnly "jQuery plugin - enforce only digits in input fields" b
#live demo http://jsfiddle.net/xpvt214o/566536/
(function($){
    function regexNumber(text) {
        return text.replace(/[^0-9]/g, '');
    }

    $.fn.digitsOnly = function() {
        return this.each(function() {
            var $field = $(this);
            $field.keydown(function (e) {
                var charCode = (e.which) ? e.which : e.keyCode;
                var acceptedKeys = [
                    8, // Backspace,
                    13, // Enter
                    46, // Delete
                    36, // Home
                    35, // End
                    37, 38, 39, 40, // Arrows
                    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, //Left digits
                    96, 97, 98, 99, 100, 101, 102, 103, 104, 105, // Right digits
                    116 // F5
                ];

                //if paste (ctrl+v) allow
                if (e.ctrlKey && charCode === 86) {
                    return true;
                }

                return (jQuery.inArray(charCode, acceptedKeys) >= 0) ? true : false;
            }).on('paste', function (e) {
                e.preventDefault();

                var pastedText = '';
                if (window.clipboardData && window.clipboardData.getData) {
                    // IE
                    pastedText = window.clipboardData.getData('Text');
                } else if (e.clipboardData && e.clipboardData.getData) {
                    pastedText = e.clipboardData.getData('text/plain');
                } else {
                    pastedText = e.originalEvent.clipboardData.getData("text");
                }

                $(this).val(regexNumber(pastedText));
            });
        });
    }
})(jQuery);
endsnippet

snippet formReset "jQuery plugin - reset form to empty values" b
(function($){
    $.fn.formReset = function() {
        return this.each(function() {
            var $form = $(this);
            if (!$form.is('form')) {
                return;
            }
            $(':input', $form)
                .not(':button, :submit, :reset, :hidden')
                .val('')
                .prop('checked', false)
                .prop('selected', false);
        });
    }
})(jQuery);
endsnippet

snippet jqueryPluginSkeleton "jQuery plugin skeleton" b
// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ($, window, document, undefined) {
    "use strict";

    // window and document are passed through as local variables rather than global
    // as this (slightly) quickens the resolution process and can be more efficiently
    // minified (especially when both are regularly referenced in your plugin).

    // Create the defaults once
    var pluginName = "${1:defaultPluginName}",
        defaults = {
            propertyName: "value"
        };

    // The actual plugin constructor
    function Plugin(element, options) {
        this.element = element;

        // jQuery has an extend method which merges the contents of two or
        // more objects, storing the result in the first object. The first object
        // is generally empty as we don't want to alter the default options for
        // future instances of the plugin
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    }

    // Avoid Plugin.prototype conflicts
    $.extend(Plugin.prototype, {
        init: function () {

            // Place initialization logic here
            // You already have access to the DOM element and
            // the options via the instance, e.g. this.element
            // and this.settings
            // you can add more functions like the one below and
            // call them like the example below
            this.yourOtherFunction("jQuery Boilerplate");
        },
        yourOtherFunction: function (text) {

            // some logic
            $(this.element).text(text);
        }
    });

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.fn[pluginName] = function (options) {
        return this.each(function () {
            if (!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" +
                    pluginName, new Plugin(this, options));
            }
        });
    };

})(jQuery, window, document);
$0
// template from https://raw.githubusercontent.com/jquery-boilerplate/jquery-boilerplate/master/src/jquery.boilerplate.js
endsnippet

snippet serializeFormJSON "jQuery serialize form to json" b
(function ($) {
    $.fn.serializeFormJSON = function() {
        let o = {};
        let a = this.serializeArray();
        $.each(a, function () {
            let name = this.name;
            let value = this.value || '';
            if (o[name]) {
                if (!Array.isArray(o[name])) {
                    o[name] = [o[name]];
                }
                o[name].push(value);
            } else {
                o[name] = value;
            }
        });
        return o;
    };
})(jQuery);
endsnippet
