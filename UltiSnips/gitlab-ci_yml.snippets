snippet job_composer "GitLab CI job - composer" b
composer:
  stage: prepare
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - php -v
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
  artifacts:
    paths:
      - vendor/
    expire_in: 30 days
    when: on_success
${0}
endsnippet

snippet job_yarn "GitLab CI job - yarn" b
yarn:
  stage: prepare
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - yarn -v
    - yarn install --frozen-lock-file
  artifacts:
    paths:
      - node_modules/
    expire_in: 30 days
    when: on_success
${0}
endsnippet

snippet job_codestyle "GitLab CI job - codestyle" b
codestyle:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phpcs --report=junit --extensions=php ./src | tee phpcs-report.xml
  dependencies:
    - composer
  artifacts:
    when: on_failure
    reports:
      junit: phpcs-report.xml
${0}
endsnippet

snippet job_security-checker "GitLab CI job - security-checker" b
security-checker:
  stage: security
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/security-checker security:check ./composer.lock --format text
  allow_failure: true
  dependencies:
    - composer
${0}
endsnippet

snippet job_phploc "GitLab CI job - phploc" b
phploc:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phploc ./src/
  dependencies:
    - composer
${0}
endsnippet

snippet job_php-lint "GitLab CI job - php-lint" b
php-lint:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/parallel-lint ./src/
  dependencies:
    - composer
${0}
endsnippet

snippet job_phpmd "GitLab CI job - phpmd" b
phpmd:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phpmd --ignore-violations-on-exit ./src text cleancode,codesize,controversial,design,naming,unusedcode
  dependencies:
    - composer
${0}
endsnippet

snippet job_phpcpd "GitLab CI job - phpcpd" b
phpcpd:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phpcpd --progress ./src/
  dependencies:
    - composer
${0}
endsnippet

snippet job_phpstan_deprecation "GitLab CI job - phpstan deprecation rules" b
phpstan-deprecation-rules:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phpstan analyse --no-progress --no-interaction ./src
  dependencies:
    - composer
${0}
endsnippet

snippet job_phpcf "GitLab CI job - phpcf checks compatibility of your code with new interpreter versions" b
phpcf:
  stage: qa
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - ./vendor/bin/phpcf --target 7.3 ./src
  dependencies:
    - composer
${0}
endsnippet

snippet job_assets "GitLab CI job - build assets" b
assets:
  stage: build
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  script:
    - yarn build
  dependencies:
    - yarn
  artifacts:
    paths:
      - ${2:assets/build}
    expire_in: 30 days
    when: on_success
${0}
endsnippet

snippet job_codeception "GitLab CI job - run unit test (codeception && yii2)" b
codeception:
  stage: testing
  image: edbizarro/gitlab-ci-pipeline-php:${1:7.2}
  services:
    - mysql:${2:5.6}
  script:
    - ./init --env=CI --overwrite=All
    - ./yii migrate/up --interactive 0
    - cd ./common && ../vendor/bin/codecept run unit
  dependencies:
    - composer
${0}
endsnippet

snippet job_hadolint "GitLab CI job - run hadolint (Dockerfile linter)" b
hadolint:
  stage: qa
  image: hadolint/hadolint:v1.16.3-debian
  script:
    - hadolint $1:frontend/Dockerfile}
    - find -iname 'Dockerfile*' | xargs --max-lines=1 hadolint
  dependencies: []
  only:
    changes:
      - $1
${0}
endsnippet

snippet cache "Gitlab CI global cache" b
cache:
  key: "$CI_JOB_NAME-$CI_JOB_ID"
  paths:
    - /home/php/.composer/cache
    - /home/php/.cache/yarn/v1
    - /home/php/.npm
endsnippet

snippet job_deploy_git "Job to deploy by git-fetch" b
deploy_production:
  stage: deploy
  image: edbizarro/gitlab-ci-pipeline-php:5.6
  environment:
    name: production
    url: https://ssorder.snlb.pl
#  only:
#    - master
  when: manual
  dependencies:
    - composer
    - assets
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # brak obslugi bledow ssh
    - echo $PROD_SSORDER_PATH
    - ssh -p22 sensilabs@192.168.15.22 "rm -rf ${PROD_SSORDER_PATH}/vendor"
    - ssh -p22 sensilabs@192.168.15.22 "rm -rf ${PROD_SSORDER_PATH}/frontend/web/assets/build"
    - scp -P22 -r ./vendor sensilabs@192.168.15.22:${PROD_SSORDER_PATH}/
    - scp -P22 -r ./frontend/web/assets/build sensilabs@192.168.15.22:${PROD_SSORDER_PATH}/frontend/web/assets/
    - ssh -p22 sensilabs@192.168.15.22 "cd ${PROD_SSORDER_PATH}/ && git fetch origin && git checkout $CI_COMMIT_SHA"
    - ssh -p22 sensilabs@192.168.15.22 "cd ${PROD_SSORDER_PATH} && ./yii migrate/up --interactive 0"
    - >
      curl -X POST -H 'Content-Type: application/json' --data '{"text":"Nowa wersja ssorder!"}' https://chat.sensilabs.pl/hooks/$PROD_ROCKET_CHAT_NOTIFY_TOKEN
$0
endsnippet

snippet job_npm_audit "Job to audit npm packages (check for vulnerabilities)" b
npm-audit:
  stage: qa
  image: ${1:node:8.9-alpine}
  script:
    - npm run audit-ci
  allow_failure: true
  dependencies:
    - npm
endsnippet

snippet wait_for_service  "Wait for service use curl" b
# wait for db (retry X times)
# Exit code 52 The server didn't reply anything, which here is considered an error
# Exit code 56 Failure in receiving network data
# https://github.com/yiisoft/yii2/blob/9767fa978ebe005fe54bd82209b967bb8c132930/.gitlab-ci.yml#L83
docker-compose run --rm php bash -c 'while [ true ]; do curl ${1:postgres:5432}; if [ $? == 52 ]; then break; fi; ((c++)) && ((c==25)) && break; sleep 2; done'
$0
endsnippet

snippet docker_tag "Build (and tag) docker image, only when tag is pushed" b
docker:master:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_USERNAME: ${1:morawskim}
  script:
    - DOCKER_AUTH=$(echo -n $DOCKER_USERNAME:$DOCKER_PASSWORD | base64)
    - |
      cat > /kaniko/.docker/config.json << EOF
      {
        "auths": {
          "https://index.docker.io/v1/": {
            "auth": "$DOCKER_AUTH"
          },
          "$CI_REGISTRY": {
            "username": "$CI_REGISTRY_USER",
            "password": "$CI_REGISTRY_PASSWORD"
          }
        }
      }
      EOF
    - TAG=$(echo $CI_COMMIT_TAG | sed 's/[^0-9\.]*//g')
    - echo $TAG
    - >
      /kaniko/executor --context $CI_PROJECT_DIR
      --dockerfile ${2:$CI_PROJECT_DIR/Dockerfile}
      --destination $CI_REGISTRY_IMAGE:$TAG
      --destination $DOCKER_USERNAME/${3:IMAGE_NAME}:$TAG
      --destination $DOCKER_USERNAME/$3
  only:
    - tags
$0
endsnippet
