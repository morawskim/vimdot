snippet dc_service_debug "docker compose service - debug container for c/c++ packages" b
${1:debug}:
    image: morawskim/opensuse-debug:${2:15.0}
    volumes:
        - ./:/app
    cap_add:
        - SYS_PTRACE
    security_opt:
        - seccomp=unconfined
    stdin_open: true
    tty: true
    working_dir: /app
    command: /bin/bash
${0}
endsnippet

snippet dc_service_mysql "docker compose service - mysql" b
${1:mysql}:
    image: mysql:${2:5.6}
    volumes:
        - ./mysqldata:/var/lib/mysql
    environment:
        MYSQL_ROOT_PASSWORD: ${3:password}
        MYSQL_DATABASE: ${4:dbname}
        MYSQL_USER: $4
        MYSQL_PASSWORD: ${5:userpassword}
    ports:
        - "3307:3306"
${0}
endsnippet

snippet dc_service_registry "docker composer service - docker registry" b
${1:registry}:
    image: registry:2
    ports:
        - 5000:5000
    environment:
        REGISTRY_HTTP_TLS_CERTIFICATE: /registry/certs/domain.crt
        REGISTRY_HTTP_TLS_KEY: /registry/certs/domain.key
        REGISTRY_AUTH: htpasswd
        REGISTRY_AUTH_HTPASSWD_PATH: /registry/auth/htpasswd
        REGISTRY_AUTH_HTPASSWD_REALM: Registry realm
    volumes:
        - ./data:/var/lib/registry
        - ./certs:/registry/certs
        - ./auth:/registry/auth
${0}
endsnippet

snippet dc_service_rocketchat "docker composer service - rocketchat" b
${1:rocketchat}:
    image: rocketchat/rocket.chat:0.70.2
    restart: unless-stopped
    volumes:
        - ./uploads:/app/uploads
    environment:
        - PORT=3000
        - ROOT_URL=${2:${ROCKETCHAT_URL:-http://localhost:3000}}
        - MONGO_URL=mongodb://mongo:27017/rocketchat
        - MONGO_OPLOG_URL=mongodb://mongo:27017/local
        - MAIL_URL=smtp://smtp.email
        - ADMIN_USERNAME=admin
        - ADMIN_PASS=admin
        - ADMIN_EMAIL=admin@example.com
#       - HTTP_PROXY=http://proxy.domain.com
#       - HTTPS_PROXY=http://proxy.domain.com
    depends_on:
        - mongo
    ports:
        - 3000:3000
    labels:
        traefik.backend: "rocketchat"
        traefik.frontend.rule: "Host:rocketchat.lvh.me"
        traefik.port: "3000"

mongo:
    image: mongo:3.2
    restart: unless-stopped
    volumes:
        - ./data/db:/data/db
        #- ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
        traefik.enable: "false"

# this container's job is just run the command to initialize the replica set.
# it will run the command and remove himself (it will not stay running)
mongo-init-replica:
    image: mongo:3.2
    command: >
        /bin/bash -c "
            sleep 5;
            mongo mongo/rocketchat --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})\"
        "
    depends_on:
        - mongo
$0
endsnippet

snippet dc_service_traefik "docker composer service - traefik" b
${1:traefik}:
    image: traefik:1.7
    command: --web --docker --logLevel=DEBUG
    ports:
      - "8000:80"
      - "8080:8080"
      - "4443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/etc/traefik/traefik.toml
$0
endsnippet

snippet dc_service_ssl_terminate_traefik "docker composer service - terminate SSL by traefik" b
${1:traefik}:
    image: traefik
    command: --web
    network_mode: "host"
    ports:
        - "7171:7171"
        - "8080:8080"
    volumes:
        - ./traefik.toml:/etc/traefik/traefik.toml
        - ./${2:server.crt}:/ssl/$2
        - ./${3:server.key}:/ssl/$3
$0
endsnippet

snippet dc_service_cli "docker compose service - cli (yarn, php)" b
${1:cli}:
    image: edbizarro/gitlab-ci-pipeline-php:${2:7.2}
    volumes:
        - ./:${3:/app}
    user: ${MY_UID:-1000}
    tty: true
    working_dir: $3
    environment:
        COMPOSER_AUTH: '{"github-oauth": {"github.com": "${COMPOSER_GITHUB_OAUTH}"}}'
${0}
endsnippet

snippet dc_service_wordpress_scan "docker compose service - wordpress scan" b
${1:wpscan}:
    image: wpscanteam/wpscan
    depends_on:
        - ${2:blog}
    links:
        - $2
    command: --url ${3:http://$2} --enumerate --plugins-detection mixed --format cli-no-colour --output /proc/self/fd/1
${0}
endsnippet

snippet dc_service_runner "docker compose service - runner (yarn, php)" b
${1:cli}:
    image: edbizarro/gitlab-ci-pipeline-php:${2:7.2}
    volumes:
        - ./:${3:/app}
    user: ${MY_UID:-1000}
    stdin_open: true
    tty: true
    working_dir: $3
    command: /bin/bash
${0}
endsnippet

snippet dc_service_newman "docker compose service - newman" b
${1:newman}:
    image: postman/newman:alpine
    restart: "no"
    volumes:
        - ./${2:integration-tests}:/tests
    depends_on:
        - traefik
    links:
        - traefik
    external_links:
        - traefik:${3:domain.lvh.me}
    command: run --environment ${4:/tests/environments/docker.postman_environment.json} --reporters cli ${5:/tests/tests/login/postman_collection.json}
${0}
endsnippet

snippet dc_service_dnsmasq "docker compose service - dnsmasq" b
${1:dnsmasq}:
    image: jpillora/dnsmasq
    volumes:
        - ${2:./dnsmasq}:/etc/dnsmasq.conf
    cap_add:
        - NET_ADMIN
    ports:
        - "53:53/tcp"
        - "53:53/udp"
        - 5380:8080
    environments:
        - HTTP_USER=${3:foo}
        - HTTP_PASS=${4:bar}
${0}
endsnippet

snippet dc_service_phpmyadmin "docker compose service - phpmyadmin" b
${1:phpmyadmin}:
    image: phpmyadmin/phpmyadmin:4.8
    links:
        - ${2:mysql}
    environment:
        - PMA_HOST=$2
    labels:
        traefik.backend: "phpmyadmin"
        traefik.frontend.rule: "Host:phpmyadmin.lvh.me"
        #htpasswd -nbB user password | sed -e 's/\\$/\\$\\$/g'
        traefik.frontend.auth.basic: '${3}'
${0}
endsnippet

snippet dc_service_nodejs "docker compose service - nodejs" b
${1:nodejs}:
    image: node:${2:10}-alpine
    environment:
        - NODE_ENV=${3:production}
    user: "node"
    working_dir: ${4:/home/node/app}
    volumes:
        - ./:$4
    command: "${5:npm start}"
${0}
endsnippet

snippet dc_service_postgres "docker compose service - postgres" b
${1:postgres}:
    image: postgres:${2:9.6}
    environment:
        - POSTGRES_USER=${3:postgres}
        - POSTGRES_PASSWORD=${4:password}
        - POSTGRES_DB=$3
    ports:
        - 5432:5432
    volumes:
        - ./${5:dbdata}:/var/lib/postgresql/data
${0}
endsnippet

snippet dc_service_adminer "docker compose service - adminer" b
${1:adminer}:
    image: adminer:${2:4.7}
    depends_on:
        - ${3:postgres}
    links:
        - $3
    labels:
        traefik.backend: "adminer"
        traefik.frontend.rule: "Host:${4:adminer.lvh.me}"
${0}
endsnippet

snippet dc_service_php_apache "docker compose service - php-apache" b
${1:apache}:
    image: php:${2:7.2-apache}
    volumes:
        - ${3:./}:/var/www/html
    ports:
        - 80:80
${0}
endsnippet

snippet dc_service_elasticsearch "docker compose service - elasticsearch" b
# https://www.docker.elastic.co/
# https://gist.github.com/ilbonte/de329ff7cfd1badeefe9ce33f9dbe8ed
elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${1:6.5.4}
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      = discovery.type=single-node
      # - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
$0
endsnippet

snippet dc_service_puppeteer "docker compose service - puppeteer-core" b
puppeteer:
    image: morawskim/puppeteer-core
    volumes:
        - ./:/home/node/app
$0
endsnippet

snippet healthcheck "docker compose healthcheck" b
healthcheck:
    test: curl --fail http://localhost/ || exit 1
    interval: 30s
    timeout: 15s
    retries: 3
    start_period: 0s
$0
endsnippet

snippet dc_service_mailhog "docker compose service - mailhog" b
mailhog:
    image: mailhog/mailhog
    labels:
        traefik.port: "8025"
        traefik.frontend.rule: "Host:mailhog.lvh.me"
$0
endsnippet

snippet dc_service_whoami "docker compose service - whoami" b
whoami:
    image: emilevauge/whoami:latest
    labels:
        traefik.backend: "whoami"
        traefik.frontend.rule: "Host:whoami.lvh.me"
$0
endsnippet

snippet dc_service_minio "docker compose service - minio" b
minio:
    image: minio/minio:${1:RELEASE.2019-08-21T19-40-07Z}
    volumes:
      - minio:/data
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 1m30s
      timeout: 20s
      retries: 3
      start_period: 3m
$0
endsnippet

snippet dc_service_php "docker compose service - php cli" b
php:
    image: php:${1:7.2-cli}
    volumes:
        - ${2:./}:${3:/app}
    working_dir: $3
    command: 'php -S 0.0.0.0:8080 -t /app/public'
    ports:
        - ${4:80}:8080
$0
endsnippet

snippet dc_service_redis "docker compose service- redis with persistent storage" b
redis:
    image: redis:6.2.0-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
        - ${1:./redis-data}:/data
$0
endsnippet

snippet dc_service_redis_web "docker compose service- Redis management tool with web interface" b
redis-web:
    image: rediscommander/redis-commander:latest
    environment:
        - REDIS_HOSTS=local:${1:redis}:${2:6379}
    labels:
        traefik.backend: "redis-web"
        traefik.port: "8081"
        traefik.frontend.rule: "Host:${3:redis.lvh.me}"
$0
endsnippet

snippet dc_service_redis_admin "docker compose service- web interface to manage Redis databases" b
redis-admin:
    image: erikdubbelboer/phpredisadmin
    environment:
      - REDIS_1_HOST=${1:redis}
      - REDIS_1_PORT=${2:6379}
      - REDIS_1_NAME=MyRedis
    labels:
      traefik.backend: "redis-admin"
      traefik.port: "80"
      traefik.frontend.rule: "Host:redis.lvh.me"
$0
endsnippet

snippet dc_service_pgadmin "docker compose service - web interface to manage PostgreSQL databases" b
pgadmin4:
  image: dpage/pgadmin4
  environment:
    PGADMIN_DEFAULT_EMAIL: ${1:admin@example.com}
    PGADMIN_DEFAULT_PASSWORD: ${2:password}
  labels:
    traefik.backend: "pgadmin"
    traefik.port: "80"
    traefik.frontend.rule: "Host:pgadmin.lvh.me"
$0
endsnippet

snippet dc_service_tor "docker compose service - Tor SOCKS5 proxy server" b
tor:
     image: peterdavehello/tor-socks-proxy:latest
     ports:
        - ${1:9150}:9150
$0
endsnippet

snippet dc_service_certbot "docker compose service - certbot (use webroot plugin)" b
certbot:
  depends_on:
    - ${1:webserver}
  image: certbot/certbot
  container_name: certbot
  volumes:
    - certbot:/etc/letsencrypt
    - www:/var/www/html
  command: certonly --webroot --webroot-path=/var/www/html --email ${2:user@your_domain} --agree-tos --no-eff-email --staging -d ${3:your_domain} -d www.$3
$0
endsnippet

snippet traefik1-labels "Traefik1 labels for service" b
traefik.enable: "true"
traefik.backend: "${1:backend}"
traefik.frontend.rule: "Host:${2:backend1.lvh.me,baclend2.lvh.me}"
#traefik.frontend.rule: "HostRegexp: ${3:subdomain}.{domain:.+}"
traefik.port: "${3:80}"
traefik.docker.network: "${4:traefik}"
traefik.frontend.passHostHeader: "true"
$0
endsnippet

snippet build "docker-compose build directive instead of image" b
build:
  context: ${1:.}
  dockerfile: ${2:Dockerfile}
  target: ${3:intermediate}
  args:
    - ${4:WITH_XDEBUG=true}
$0
endsnippet

snippet phpXdebugEnv "ENV variables for XDEBUG" b
XDEBUG_CONFIG: "remote_connect_back=0 remote_host=\${MY_IP:-${1:172.17.0.1}} remote_enable=1 remote_port=9000"
PHP_IDE_CONFIG: "serverName=\${DEV_SERVER_NAME:-${2:service.lvh.me}}"
$0
endsnippet

snippet phpXdebug3Env "ENV variables for XDEBUG3" b
XDEBUG_MODE: develop,debug
XDEBUG_CONFIG: "client_host=\${MY_IP:-${1:172.17.0.1}} discover_client_host=0 client_port=9003"
XDEBUG_TRIGGER: "default_no_matter"
XDEBUG_SESSION: xdebug
PHP_IDE_CONFIG: "serverName=\${DEV_SERVER_NAME:-${2:service.lvh.me}}"
$0
endsnippet

snippet dc_service_csvkit "docker compose service - csvsql-mysql" b
csvkit:
    image: morawskim/csvsql-mysql:${1:1.0.5}
    restart: "no"
    volumes:
        - ${2:./}:${3:/app}
$0
endsnippet

snippet dcTmpfs "docker-compose mount tmpfs volume in container" b
tmpfs:
  - ${1:/var/www/html/var/cache}:mode=750,size=50m,uid=33,gid=33
$0
endsnippet

snippet dc_service_nginx_fpm "docker-compose services nginx and php-fpm" b
httpd:
    image: nginx:1.19-alpine
    depends_on:
        - php-fpm
    labels:
        traefik.backend: "httpd"
        traefik.frontend.rule: "Host:${1:example.lvh.me}"
    volumes:
        - ./:/var/www/html
        - ./provision/vhost.conf:/etc/nginx/conf.d/default.conf
php-fpm:
    # For symfony use "dcTmpfs" snippet to create tmpfs volume
    # To use build directive instead of image use "build" snippet
    image: php:7.4-fpm
    volumes:
        - ./:/var/www/html
    # environment:
        # Use snippet bellow to include xdebug3 env variables
        # phpXdebug3Env
$0
endsnippet

snippet dcLogging "docker-compose - logging configuration for a service" b
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "2"
$0
endsnippet

snippet dc_service_wait "docker compose service - wait" b
# Example: docker-compose run --rm $1 -c mysql:3306 -t 15
${1:wait}:
    image: dokku/wait
$0
endsnippet

snippet dc_service_dozzle "docker compose service - dozzle (Log viewer for Docker)" b
${1:dozzle}:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # dozzle listen on port 8080
$0
endsnippet

snippet dc_service_symfony_worker "docker compose service - symfony messenger worker" b
${1:symfony-worker}:
    image: ${2:php:7.4-fpm}
    entrypoint: ["/opt/web/bin/console", "messenger:consume", "--limit=100", "--time-limit=3600", "-v", "${3:queue}"]
    restart: unless-stopped
$0
endsnippet

snippet dc_service_ofelia "docker compose service - ofelia a docker job scheduler (aka. crontab for docker)" b
${1:ofelia}:
    image: 'mcuadros/ofelia:v0.3.2'
    restart: unless-stopped
    volumes:
      - ./ofelia_config.ini:/etc/ofelia/config.ini
      - /var/run/docker.sock:/var/run/docker.sock
$0
endsnippet
