snippet dc_service_debug "docker compose service - debug container for c/c++ packages" b
${1:debug}:
    image: morawskim/opensuse-debug:${2:15.0}
    volumes:
        - ./:/app
    cap_add:
        - SYS_PTRACE
    security_opt:
        - seccomp=unconfined
    stdin_open: true
    tty: true
    working_dir: /app
    command: /bin/bash
${0}
endsnippet

snippet dc_service_mysql "docker compose service - mysql" b
${1:mysql}:
    image: mysql:${2:5.6}
    volumes:
        - ./mysqldata:/var/lib/mysql
    environment:
        MYSQL_ROOT_PASSWORD: ${3:password}
        MYSQL_DATABASE: ${4:dbname}
        MYSQL_USER: $4
        MYSQL_PASSWORD: ${5:userpassword}
    ports:
        - "3307:3306"
${0}
endsnippet

snippet dc_service_registry "docker composer service - docker registry" b
${1:registry}:
    image: registry:2
    ports:
        - 5000:5000
    environment:
        REGISTRY_HTTP_TLS_CERTIFICATE: /registry/certs/domain.crt
        REGISTRY_HTTP_TLS_KEY: /registry/certs/domain.key
        REGISTRY_AUTH: htpasswd
        REGISTRY_AUTH_HTPASSWD_PATH: /registry/auth/htpasswd
        REGISTRY_AUTH_HTPASSWD_REALM: Registry realm
    volumes:
        - ./data:/var/lib/registry
        - ./certs:/registry/certs
        - ./auth:/registry/auth
${0}
endsnippet

snippet dc_service_rocketchat "docker composer service - rocketchat" b
${1:rocketchat}:
    image: rocketchat/rocket.chat:0.70.2
    restart: unless-stopped
    volumes:
        - ./uploads:/app/uploads
    environment:
        - PORT=3000
        - ROOT_URL=${2:${ROCKETCHAT_URL:-http://localhost:3000}}
        - MONGO_URL=mongodb://mongo:27017/rocketchat
        - MONGO_OPLOG_URL=mongodb://mongo:27017/local
        - MAIL_URL=smtp://smtp.email
        - ADMIN_USERNAME=admin
        - ADMIN_PASS=admin
        - ADMIN_EMAIL=admin@example.com
#       - HTTP_PROXY=http://proxy.domain.com
#       - HTTPS_PROXY=http://proxy.domain.com
    depends_on:
        - mongo
    ports:
        - 3000:3000
    labels:
        traefik.backend: "rocketchat"
        traefik.frontend.rule: "Host:rocketchat.lvh.me"
        traefik.port: "3000"

mongo:
    image: mongo:3.2
    restart: unless-stopped
    volumes:
        - ./data/db:/data/db
        #- ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
        traefik.enable: "false"

# this container's job is just run the command to initialize the replica set.
# it will run the command and remove himself (it will not stay running)
mongo-init-replica:
    image: mongo:3.2
    command: >
        /bin/bash -c "
            sleep 5;
            mongo mongo/rocketchat --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})\"
        "
    depends_on:
        - mongo
$0
endsnippet

snippet dc_service_traefik "docker composer service - traefik" b
${1:traefik}:
    image: traefik
    command: --web --docker --logLevel=DEBUG
    ports:
      - "8000:80"
      - "8080:8080"
      - "4443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/etc/traefik/traefik.toml
$0
endsnippet

snippet dc_service_ssl_terminate_traefik "docker composer service - terminate SSL by traefik" b
${1:traefik}:
    image: traefik
    command: --web
    network_mode: "host"
    ports:
        - "7171:7171"
        - "8080:8080"
    volumes:
        - ./traefik.toml:/etc/traefik/traefik.toml
        - ./${2:server.crt}:/ssl/$2
        - ./${3:server.key}:/ssl/$3
$0
endsnippet

snippet dc_service_cli "docker compose service - cli (yarn, php)" b
${1:cli}:
    image: edbizarro/gitlab-ci-pipeline-php:${2:7.2}
    volumes:
        - ./:${3:/app}
    user: ${MY_UID:-1000}
    tty: true
    working_dir: $3
${0}
endsnippet

snippet dc_service_wordpress_scan "docker compose service - wordpress scan" b
${1:wpscan}:
    image: wpscanteam/wpscan
    depends_on:
        - ${2:blog}
    links:
        - $2
    command: --url ${3:http://$2} --enumerate --plugins-detection mixed --format cli-no-colour --output /proc/self/fd/1
${0}
endsnippet

snippet dc_service_runner "docker compose service - runner (yarn, php)" b
${1:cli}:
    image: edbizarro/gitlab-ci-pipeline-php:${2:7.2}
    volumes:
        - ./:${3:/app}
    user: ${MY_UID:-1000}
    stdin_open: true
    tty: true
    working_dir: $3
    command: /bin/bash
${0}
endsnippet

snippet dc_service_newman "docker compose service - newman" b
${1:newman}:
    image: postman/newman:alpine
    volumes:
        - ./${2:integration-tests}:/tests
    depends_on:
        - traefik
    links:
        - traefik
    external_links:
        - traefik:${3:domain.lvh.me}
    command: run --environment ${4:/tests/environments/docker.postman_environment.json} --reporters cli ${5:/tests/tests/login/postman_collection.json}
${0}
endsnippet

snippet dc_service_dnsmasq "docker compose service - dnsmasq" b
${1:dnsmasq}:
    image: jpillora/dnsmasq
    volumes:
        - ${2:./dnsmasq}:/etc/dnsmasq.conf
    cap_add:
        - NET_ADMIN
    ports:
        - "53:53/tcp"
        - "53:53/udp"
        - 5380:8080
    environments:
        - HTTP_USER=${3:foo}
        - HTTP_PASS=${4:bar}
${0}
endsnippet
