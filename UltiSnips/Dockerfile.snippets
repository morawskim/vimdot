snippet phpGd "Install php gd extension in official php debian image" b
# Required packages: libjpeg-dev libpng12-dev libfreetype6-dev
# aptGetInstall

# Install the PHP gd library
RUN docker-php-ext-configure gd \
        --enable-gd-native-ttf \
        --with-jpeg-dir=/usr/lib \
        --with-freetype-dir=/usr/include/freetype2 && \
    docker-php-ext-install gd
${0}
endsnippet

snippet phpPgsql "Install php pdo_pgsql extension in official php debian image" b
# Required packages: libpq-dev
# aptGetInstall

RUN docker-php-ext-install pdo_pgsql
${0}
endsnippet

snippet phpMongoDb "Install php mongodb extension in official php debian image" b
# The SCRAM_SHA_1 authentication mechanism requires libmongoc built with ENABLE_SSL
# This require package: libssl-dev
# aptGetInstall

RUN pecl install  mongodb && docker-php-ext-enable mongodb
$0
endsnippet

snippet phpIntl "Install php intl extension in official php debian image" b
# require package libicu-dev
# aptGetInstall

RUN docker-php-ext-install intl
${0}
endsnippet

snippet composer "Install composer" b
# require unzip or git to download packages
RUN curl -sS https://getcomposer.org/installer | php -- \
         --filename=composer \
         --install-dir=/usr/local/bin
#RUN composer global require --prefer-stable --prefer-dist hirak/prestissimo fxp/composer-asset-plugin
${0}
endsnippet

snippet healthcheckCurl "Healthcheck with curl" b
HEALTHCHECK --interval=30s --timeout=15s CMD curl --fail ${1:http://localhost/} || exit 1
$0
endsnippet

snippet copy "Copy with chown" b
COPY --chown=${1:www-data}:${2:www-data} ${3:./} ${4:/app}
$0
endsnippet

snippet aptGetInstall "install package by apt-get and clean after install" b
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ${1:packageName} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
$0
endsnippet

snippet npmInstall "npm install and clean cache" b
RUN npm ci --production && npm cache clean --force
$0
endsnippet

snippet xdebugInstall "Install xdebug PHP extension in official php debian image" b
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ARG WITH_XDEBUG=false
RUN if [[ $WITH_XDEBUG = "true" ]]; then \
    # Install xdebug (https://pecl.php.net/package/xdebug)
    pecl install xdebug-${2.8.1} \
    && docker-php-ext-enable xdebug \
    && echo "xdebug.remote_enable=1" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "error_reporting = E_ALL" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_startup_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; \
  fi
$0
endsnippet

snippet rdkafkaPHP "Install rdkafka PHP extension" b
# require librdkafka-dev package
RUN pecl install rdkafka-4.0.3 && \
    docker-php-ext-enable rdkafka
$0
endsnippet
