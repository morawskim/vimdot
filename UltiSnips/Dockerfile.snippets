snippet phpGd "Install php gd extension in official php debian image" b
# Required packages: libjpeg-dev libpng12-dev libfreetype6-dev
# aptGetInstall

# Install the PHP gd library
RUN docker-php-ext-configure gd \
        --enable-gd-native-ttf \
        --with-jpeg-dir=/usr/lib \
        --with-freetype-dir=/usr/include/freetype2 && \
    docker-php-ext-install gd
${0}
endsnippet

snippet phpPgsql "Install php pdo_pgsql extension in official php debian image" b
# Required packages: libpq-dev
# aptGetInstall

RUN docker-php-ext-install pdo_pgsql
${0}
endsnippet

snippet phpMongoDb "Install php mongodb extension in official php debian image" b
# The SCRAM_SHA_1 authentication mechanism requires libmongoc built with ENABLE_SSL
# This require package: libssl-dev
# aptGetInstall

RUN pecl install  mongodb && docker-php-ext-enable mongodb
$0
endsnippet

snippet phpIntl "Install php intl extension in official php debian image" b
# require package libicu-dev
# aptGetInstall

RUN docker-php-ext-install intl
${0}
endsnippet

snippet composer "Copy composer from official image" b
COPY --from=composer:${1:2.3} /usr/bin/composer /usr/bin/composer
${0}
endsnippet

snippet healthcheckCurl "Healthcheck with curl" b
HEALTHCHECK --interval=30s --timeout=15s --start-period=0 --retries=3 CMD curl --fail ${1:http://localhost/} || exit 1
$0
endsnippet

snippet copy "Copy with chown" b
COPY --chown=${1:www-data}:${2:www-data} ${3:./} ${4:/app}
$0
endsnippet

snippet aptGetInstall "install package by apt-get and clean after install" b
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ${1:packageName} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
$0
endsnippet

snippet npmInstall "npm install and clean cache" b
RUN npm ci --production && npm cache clean --force
$0
endsnippet

snippet xdebugInstall "Install xdebug PHP extension in official php debian image" b
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ARG WITH_XDEBUG=false
RUN if [[ $WITH_XDEBUG = "true" ]]; then \
    # Install xdebug (https://pecl.php.net/package/xdebug)
    pecl install xdebug-${1:2.8.1} \
    && docker-php-ext-enable xdebug \
    && echo "xdebug.remote_enable=1" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "error_reporting = E_ALL" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_startup_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; \
  fi
$0
endsnippet

snippet xdebug3Install "Install xdebug3 PHP extension in official php debian image" b
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ARG WITH_XDEBUG=false
RUN if [[ $WITH_XDEBUG = "true" ]]; then \
    # Install xdebug (https://pecl.php.net/package/xdebug)
    pecl install xdebug-${1:3.0.1} \
    && docker-php-ext-enable xdebug \
    && echo "xdebug.mode=develop,debug" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "error_reporting = E_ALL" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_startup_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "display_errors = On" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; \
  fi
$0
endsnippet

snippet rdkafkaPHP "Install rdkafka PHP extension" b
# require librdkafka-dev package
RUN pecl install rdkafka-4.0.3 && \
    docker-php-ext-enable rdkafka
$0
endsnippet

snippet phpPdoMysql "Enable PHP pdo_mysql extension" b
RUN docker-php-ext-install \
    pdo_mysql
$0
endsnippet

snippet phpRedis "Install redis PHP extension" b
RUN echo -e "no\nno\nno\n" | pecl install redis-5.2.1 \
    && echo "extension=redis.so" | tee /usr/local/etc/php/conf.d/redis.ini
$0
endsnippet

snippet phpBlackfire "Install Blackfire PHP probe extension" b
RUN version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") \
    && architecture=$(uname -m) \
    && curl -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/$architecture/$version \
    && mkdir -p /tmp/blackfire \
    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \
    && mv /tmp/blackfire/blackfire-*.so $(php -r "echo ini_get ('extension_dir');")/blackfire.so \
    && printf "extension=blackfire.so\nblackfire.agent_socket=${1:tcp://blackfire:8307}\n" > $PHP_INI_DIR/conf.d/blackfire.ini \
    && rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz
$0
endsnippet

snippet composer "Install composer" b
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
$0
endsnippet

snippet phpAmqp "Enable PHP amqp extension (RabbitMQ)" b
# package librabbitmq-dev is required
RUN pecl install amqp && docker-php-ext-enable amqp
$0
endsnippet

snippet phpExtensionInstaller "Install php-extension-installer, which simplify installing extensions in official PHP images" b
# see https://github.com/mlocati/docker-php-extension-installer
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
RUN install-php-extensions ${1:xdebug-^3.1 @composer}
$0
endsnippet
