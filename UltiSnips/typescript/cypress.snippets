snippet cyCmdTypes "Cypress types for custom command" b
/// <reference types="cypress" />

declare namespace Cypress {
    interface Chainable {
        ${1:customCommand()}: Chainable<unknown>;
    }
}
$0
endsnippet

snippet cyRequest "Cypress POST request" b
cy.request({
    url: \`${1:/api/endpoint}\`,
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    },
    body: {},
}).then((response) => {
    expect(response.status).to.equal(200);
    const body = response.body;
});
$0
endsnippet

snippet cyLog "Cypress print to the Command Log" b
Cypress.log({
    name: ${1:''},
    displayName: '${2:shorter name for the Command Log}',
    message: \`\`,
    consoleProps: () => {
      // return an object which will
      // print to dev tools console on click
      return {$0}
    }
});
$0
endsnippet

snippet cyChainableTuple "Cypress append chainable result to tuple" b
const appendChainableResultToTuple = <T extends unknown[], U extends unknown>(data: readonly [...T], cypressChainable: Chainable<U>) => {
    return cypressChainable.then(result => [...data, result] as const)
};
$0
endsnippet

snippet cyCustomCmd "Cypress custom command" b
Cypress.Commands.add('${1:customCommand}', () => {
  // to add definition for typescript use snippet cyCmdTypes
  $0
});
endsnippet

snippet cySelectFileCmd "Cypress selectFile with dropzone" b
cy.get('.dropzone')
    .selectFile('cypress/fixtures/${1:picture.jpg}', {
        action: 'drag-drop',
    });
$0
endsnippet


snippet cyComponentTestConfig "Cypress testing components" b
# `cypress/plugins/index.js`

/**
 * @type {Cypress.PluginConfig}
 */
module.exports = (on, config) => {
    if (config.testingType === 'component') {
        require('@cypress/react/plugins/react-scripts')(on, config);
    }

    return config;
};
$0
endsnippet
